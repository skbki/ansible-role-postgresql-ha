---
- name: PostgreSQL | Make sure the postgres data directory exists
  file:
    path: "{{ postgresql_data_directory }}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    state: directory
    mode: 0700
  register: pgdata_dir_exist

- name: PostgreSQL | Make sure the postgres WAL directory exists
  file:
    path: "{{ postgresql_wal_directory }}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    state: directory
    mode: 0700
  register: pgwal_dir_exist
  when: postgresql_wal_directory != ""

- name: PostgreSQL | Make sure the postgres log directory exists
  file:
    path: "{{ postgresql_log_directory }}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    state: directory
    mode: 0700
  register: pglog_dir_exist
  when: postgresql_log_directory != "pg_log"

- name: PostgreSQL | Ensure the locale for lc_collate and lc_ctype is generated | Debian
  become: yes
  locale_gen: 
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ postgresql_locale }}"
    - "{{ postgresql_ctype }}"
  when: ansible_os_family == "Debian" and item != "C.UTF-8"

- name: PostgreSQL | Stop PostgreSQL | Debian
  shell: 
    cmd: pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} stop
    executable: /bin/bash
  become_user: "{{ postgresql_service_user }}"
  when: ansible_os_family == "Debian" and postgresql_cluster_reset
  ignore_errors: yes

- name: PostgreSQL | Reset the cluster - drop the existing one | Debian
  shell: pg_dropcluster {{ postgresql_version }} {{ postgresql_cluster_name }}
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: ansible_os_family == "Debian" and postgresql_cluster_reset
  ignore_errors: yes

- name: PostgreSQL | Reset the cluster - create a new one (with specified encoding and locale) | Debian
  shell: >
    pg_createcluster --locale {{ postgresql_locale }}
    -e {{ postgresql_encoding }} -d {{ postgresql_data_directory }}
    {{ postgresql_version }} {{ postgresql_cluster_name }}
    --
    {% if postgresql_data_checksums and postgresql_version is version_compare('9.3', '>=') %}--data-checksums{% endif %}
    {% if postgresql_pwfile != "" %}--pwfile={{ postgresql_pwfile }} {% endif %}
    {% if postgresql_wal_directory != "" and postgresql_version is version_compare('10', '<') %}--xlogdir={{ postgresql_wal_directory }} {% endif %}
    {% if postgresql_wal_directory != "" and postgresql_version is version_compare('10', '>=') %}--waldir={{ postgresql_wal_directory }} {% endif %}
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: ansible_os_family == "Debian" and postgresql_cluster_reset

- name: PostgreSQL | Start PostgreSQL | Debian
  shell: 
    cmd: pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} start
    executable: /bin/bash
  become_user: "{{ postgresql_service_user }}"
  when: ansible_os_family == "Debian" and postgresql_cluster_reset

- name: PostgreSQL | Verify postgresql cluster version
  command: grep ^{{ postgresql_version }}$ {{ postgresql_data_directory }}/PG_VERSION
  changed_when: false

- name: PostgreSQL | Ensure configuration directory exists
  file:
    path: "{{ postgresql_conf_directory }}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0700
    state: directory

- name: PostgreSQL | Update configuration - pt. 1 (pg_hba.conf) # TODO : consider refactoring using postgresql_pg_hba module instead
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_conf_directory }}/pg_hba.conf"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0640
  register: postgresql_configuration_pt1

- name: PostgreSQL | Update configuration - pt. 2 (postgresql.conf)
  template:
    src: "postgresql.conf-{{ postgresql_version }}.j2"
    dest: "{{ postgresql_conf_directory }}/postgresql.conf"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0640
  register: postgresql_configuration_pt2

- name: PostgreSQL | Update configuration - pt. 3 (pg_ident.conf)
  template:
    src: pg_ident.conf.j2
    dest: "{{ postgresql_ident_file }}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0640
  register: postgresql_configuration_pt4
  notify: restart postgresql

- name: PostgreSQL | Create folder for additional configuration files
  file:
    name: "{{ postgresql_conf_directory }}/conf.d"
    state: directory
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0755

- name: PostgreSQL | Ensure the pid directory for PostgreSQL exists
  file:
    name: "{{ postgresql_pid_directory }}"
    state: directory
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: u=rwX,g=rwXs,o=rx
  notify: restart postgresql

- name: PostgreSQL | Reload all conf files
  shell: 
    cmd: pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} reload
    executable: /bin/bash
  become_user: "{{ postgresql_service_user }}"
  when: postgresql_configuration_pt1 is defined or postgresql_configuration_pt2 is defined or postgresql_configuration_pt3 is defined or postgresql_systemd_custom_conf is defined

- name: PostgreSQL | Restart service
  shell: 
    cmd: pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} restart
    executable: /bin/bash
  become_user: "{{ postgresql_service_user }}"
  when: postgresql_configuration_pt2 is defined
  register: postgresql_restart
  failed_when: postgresql_restart.rc not in [0, 2] # handle already-running return codes
