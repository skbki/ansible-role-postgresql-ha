---
- name: PostgreSQL | Ensure PostgreSQL is running
  shell: 
    cmd: pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} start
    executable: /bin/bash
  become_user: "root"
  become: yes
  register: postgresql_restart
  failed_when: postgresql_restart.rc not in [0, 2] # handle already-running return codes

- name: PostgreSQL | Make sure the PostgreSQL databases are present
  postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ item.owner | default(postgresql_database_owner) }}"
    encoding: "{{ item.encoding | default(postgresql_encoding) }}"
    lc_collate: "{{ item.lc_collate | default(postgresql_locale) }}"
    lc_ctype: "{{ item.lc_ctype | default(postgresql_ctype) }}"
    port: "{{ postgresql_port }}"
    template: "template0"
    state: present
    login_user: "{{ postgresql_admin_user }}"
  become: yes
  become_user: "{{ postgresql_admin_user }}"
  with_items: "{{ postgresql_databases }}"
  when: postgresql_databases|length > 0 and repmgr_primary

- name: PostgreSQL | add pg_stat_statements to the database with the requirement
  become: yes
  become_user: "{{ postgresql_service_user }}"
  shell: "{{ postgresql_bin_directory }}/psql {{pg_stat_statements_database | default('postgres')}} --port={{ postgresql_port | int }} --username {{ postgresql_admin_user }} -c 'create extension if not exists pg_stat_statements;'"
  when: postgresql_ext_install_pg_stat_statements is defined and postgresql_ext_install_pg_stat_statements and ansible_nodename == repmgr_master
  register: pg_stat_statements_ext_result
  failed_when: pg_stat_statements_ext_result.rc != 0 and ("already exists, skipping" not in pg_stat_statements_ext_result.stderr)
  changed_when: pg_stat_statements_ext_result.rc == 0 and ("already exists, skipping" not in pg_stat_statements_ext_result.stderr)

- name: PostgreSQL | Add postgis to the databases with the requirement
  become: yes
  become_user: "{{ postgresql_service_user }}"
  shell: "{{ postgresql_bin_directory }}/psql {{ item.name }} --port={{ postgresql_port | int }} --username {{ postgresql_admin_user }} -c 'CREATE EXTENSION IF NOT EXISTS postgis;'&&psql {{ item.name }} -c 'CREATE EXTENSION IF NOT EXISTS postgis_topology;'"
  with_items: "{{ postgresql_databases }}"
  when: item.gis is defined and item.gis and ansible_nodename == repmgr_master

- name: PostgreSQL | Add timescaledb to the database with the requirement
  become: yes
  become_user: "{{ postgresql_service_user }}"
  shell: "{{ postgresql_bin_directory }}/psql {{ item.name }} --port={{ postgresql_port | int }} --username {{ postgresql_admin_user }} -c 'CREATE EXTENSION IF NOT EXISTS timescaledb;'"
  with_items: "{{ postgresql_databases }}"
  when: item.timescaledb is defined and item.timescaledb and ansible_nodename == repmgr_master
  register: timescaledb_ext_result
  failed_when: timescaledb_ext_result.rc != 0 and ("already exists, skipping" not in timescaledb_ext_result.stderr)
  changed_when: timescaledb_ext_result.rc == 0 and ("already exists, skipping" not in timescaledb_ext_result.stderr)
